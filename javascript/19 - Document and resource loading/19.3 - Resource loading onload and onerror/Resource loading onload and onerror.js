/*

Carregamento de recursos: onload e onerror
O navegador nos permite rastrear o carregamento de recursos externos ‚Äì scripts, iframes, imagens e assim por diante.

Existem dois eventos para isso:

onload‚Äì carga bem-sucedida,
onerror- um erro ocorreu.
Carregando um script
Digamos que precisamos carregar um script de terceiros e chamar uma fun√ß√£o que reside l√°.

Podemos carreg√°-lo dinamicamente, assim:

let script = document.createElement('script');
script.src = "my.js";

document.head.append(script);
‚Ä¶Mas como executar a fun√ß√£o que est√° declarada dentro desse script? Precisamos esperar at√© que o script carregue e s√≥ ent√£o podemos cham√°-lo.

Observe:
Para nossos pr√≥prios scripts, poder√≠amos usar m√≥dulos JavaScript aqui, mas eles n√£o s√£o amplamente adotados por bibliotecas de terceiros.

script.onload
O principal ajudante √© o loadevento. Ele √© acionado depois que o script foi carregado e executado.

Por exemplo:

let script = document.createElement('script');

// can load any script, from any domain
script.src = "https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.3.0/lodash.js"
document.head.append(script);

script.onload = function() {
  // the script creates a variable "_"
  alert( _.VERSION ); // shows library version
};
Assim onload, podemos usar vari√°veis ‚Äã‚Äãde script, executar fun√ß√µes etc.

‚Ä¶E se o carregamento falhar? Por exemplo, esse script n√£o existe (erro 404) ou o servidor est√° inoperante (indispon√≠vel).

script.onerror
Os erros que ocorrem durante o carregamento do script podem ser rastreados em um errorevento.

Por exemplo, vamos solicitar um script que n√£o existe:

let script = document.createElement('script');
script.src = "https://example.com/404.js"; // no such script
document.head.append(script);

script.onerror = function() {
  alert("Error loading " + this.src); // Error loading https://example.com/404.js
};
Observe que n√£o podemos obter detalhes de erro HTTP aqui. N√£o sabemos se foi um erro 404 ou 500 ou algo mais. S√≥ que o carregamento falhou.

Importante:
Eventos onload/ onerroracompanhar apenas o pr√≥prio carregamento.

Erros que podem ocorrer durante o processamento e execu√ß√£o do script est√£o fora do escopo desses eventos. Ou seja: se um script foi carregado com sucesso, ele onloaddispara, mesmo que tenha erros de programa√ß√£o. Para rastrear erros de script, pode-se usar window.onerroro manipulador global.

Outros recursos
Os eventos loade errortamb√©m funcionam para outros recursos, basicamente para qualquer recurso que tenha um arquivo src.

Por exemplo:

let img = document.createElement('img');
img.src = "https://js.cx/clipart/train.gif"; // (*)

img.onload = function() {
  alert(`Image loaded, size ${img.width}x${img.height}`);
};

img.onerror = function() {
  alert("Error occurred while loading image");
};
No entanto, existem algumas notas:

A maioria dos recursos come√ßa a carregar quando s√£o adicionados ao documento. Mas <img>√© uma exce√ß√£o. Ele come√ßa a carregar quando recebe um src (*).
Para <iframe>, o iframe.onloadevento √© acionado quando o carregamento do iframe √© conclu√≠do, tanto para carregamento bem-sucedido quanto em caso de erro.
Isso por raz√µes hist√≥ricas.

Pol√≠tica de origem cruzada
Existe uma regra: os scripts de um site n√£o podem acessar o conte√∫do do outro site. Assim, por exemplo, um script em https://facebook.comn√£o pode ler a caixa de correio do usu√°rio em https://gmail.com.

Ou, para ser mais preciso, uma origem (dom√≠nio/porta/trig√™meo de protocolo) n√£o pode acessar o conte√∫do de outra. Portanto, mesmo que tenhamos um subdom√≠nio ou apenas outra porta, essas s√£o origens diferentes sem acesso umas √†s outras.

Esta regra tamb√©m afeta recursos de outros dom√≠nios.

Se estivermos usando um script de outro dom√≠nio e houver um erro nele, n√£o poderemos obter os detalhes do erro.

Por exemplo, vamos pegar um script error.jsque consiste em uma √∫nica chamada de fun√ß√£o (ruim):

// üìÅ error.js
noSuchFunction();
Agora carregue-o do mesmo site onde est√° localizado:

<script>
window.onerror = function(message, url, line, col, errorObj) {
  alert(`${message}\n${url}, ${line}:${col}`);
};
</script>
<script src="/article/onload-onerror/crossorigin/error.js"></script>
Podemos ver um bom relat√≥rio de erro, como este:

Uncaught ReferenceError: noSuchFunction is not defined
https://javascript.info/article/onload-onerror/crossorigin/error.js, 1:1
Agora vamos carregar o mesmo script de outro dom√≠nio:

<script>
window.onerror = function(message, url, line, col, errorObj) {
  alert(`${message}\n${url}, ${line}:${col}`);
};
</script>
<script src="https://cors.javascript.info/article/onload-onerror/crossorigin/error.js"></script>
O relat√≥rio √© diferente, assim:

Script error.
, 0:0
Os detalhes podem variar dependendo do navegador, mas a ideia √© a mesma: qualquer informa√ß√£o sobre as partes internas de um script, incluindo rastreamentos de pilha de erros, fica oculta. Exatamente porque √© de outro dom√≠nio.

Por que precisamos de detalhes do erro?

Existem muitos servi√ßos (e podemos construir o nosso pr√≥prio) que detectam erros globais usando window.onerror, salvam erros e fornecem uma interface para acess√°-los e analis√°-los. Isso √© √≥timo, pois podemos ver erros reais, acionados por nossos usu√°rios. Mas se um script vem de outra origem, ent√£o n√£o h√° muita informa√ß√£o sobre erros nele, como acabamos de ver.

A pol√≠tica semelhante de origem cruzada (CORS) tamb√©m √© aplicada para outros tipos de recursos.

Para permitir o acesso de origem cruzada, a <script>tag precisa ter o crossoriginatributo, al√©m do servidor remoto deve fornecer cabe√ßalhos especiais.

Existem tr√™s n√≠veis de acesso de origem cruzada:

Sem crossoriginatributo ‚Äì acesso proibido.
crossorigin="anonymous"‚Äì acesso permitido se o servidor responder com o cabe√ßalho Access-Control-Allow-Origincom *ou nossa origem. O navegador n√£o envia informa√ß√µes de autoriza√ß√£o e cookies para o servidor remoto.
crossorigin="use-credentials"‚Äì acesso permitido se o servidor enviar de volta o cabe√ßalho Access-Control-Allow-Origincom nossa origem e Access-Control-Allow-Credentials: true. O navegador envia informa√ß√µes de autoriza√ß√£o e cookies para o servidor remoto.
Observe:
Voc√™ pode ler mais sobre o acesso cross-origin no cap√≠tulo Fetch: Cross-Origin Requests . Ele descreve o fetchm√©todo para solicita√ß√µes de rede, mas a pol√≠tica √© exatamente a mesma.

Algo como ‚Äúcookies‚Äù est√° fora do nosso escopo atual, mas voc√™ pode ler sobre eles no cap√≠tulo Cookies, document.cookie .

No nosso caso, n√£o t√≠nhamos nenhum atributo crossorigin. Portanto, o acesso cross-origem foi proibido. Vamos adicion√°-lo.

Podemos escolher entre "anonymous"(nenhum cookie enviado, um cabe√ßalho do lado do servidor necess√°rio) e "use-credentials"(enviar cookies tamb√©m, dois cabe√ßalhos do lado do servidor necess√°rios).

Se n√£o nos importamos com cookies, ent√£o "anonymous"√© o seguinte:

<script>
window.onerror = function(message, url, line, col, errorObj) {
  alert(`${message}\n${url}, ${line}:${col}`);
};
</script>
<script crossorigin="anonymous" src="https://cors.javascript.info/article/onload-onerror/crossorigin/error.js"></script>
Agora, supondo que o servidor forne√ßa um Access-Control-Allow-Origincabe√ßalho, est√° tudo bem. Temos o relat√≥rio de erro completo.

Resumo
Imagens <img>, estilos externos, scripts e outros recursos fornecem loade erroreventos para rastrear seu carregamento:

loaddispara em uma carga bem-sucedida,
errordispara em uma carga com falha.
A √∫nica exce√ß√£o √© <iframe>: por raz√µes hist√≥ricas ele sempre aciona load, para qualquer finaliza√ß√£o de carregamento, mesmo que a p√°gina n√£o seja encontrada.

O readystatechangeevento tamb√©m funciona para recursos, mas raramente √© usado, pois load/erroros eventos s√£o mais simples.

*/

