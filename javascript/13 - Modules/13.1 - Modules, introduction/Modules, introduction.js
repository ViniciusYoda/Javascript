/*

M√≥dulos, introdu√ß√£o
√Ä medida que nosso aplicativo cresce, queremos dividi-lo em v√°rios arquivos, chamados de ‚Äúm√≥dulos‚Äù. Um m√≥dulo pode conter uma classe ou uma biblioteca de fun√ß√µes para um prop√≥sito espec√≠fico.

Por muito tempo, o JavaScript existiu sem uma sintaxe de m√≥dulo no n√≠vel da linguagem. Isso n√£o foi um problema, porque inicialmente os scripts eram pequenos e simples, ent√£o n√£o havia necessidade.

Mas eventualmente os scripts se tornaram cada vez mais complexos, ent√£o a comunidade inventou uma variedade de maneiras de organizar o c√≥digo em m√≥dulos, bibliotecas especiais para carregar m√≥dulos sob demanda.

Para citar alguns (por raz√µes hist√≥ricas):

AMD ‚Äì um dos sistemas de m√≥dulos mais antigos, inicialmente implementado pela biblioteca require.js .
CommonJS ‚Äì o sistema de m√≥dulos criado para o servidor Node.js.
UMD ‚Äì mais um sistema de m√≥dulos, sugerido como universal, compat√≠vel com AMD e CommonJS.

Agora, tudo isso lentamente se tornou parte da hist√≥ria, mas ainda podemos encontr√°-los em scripts antigos.

O sistema de m√≥dulos de n√≠vel de linguagem apareceu no padr√£o em 2015, evoluiu gradualmente desde ent√£o e agora √© suportado por todos os principais navegadores e no Node.js. Portanto, estudaremos os m√≥dulos JavaScript modernos a partir de agora.

O que √© um m√≥dulo?
Um m√≥dulo √© apenas um arquivo. Um script √© um m√≥dulo. T√£o simples como isso.

Os m√≥dulos podem carregar uns aos outros e usar diretivas especiais exporte importpara trocar funcionalidade, chamar fun√ß√µes de um m√≥dulo de outro:

exportpalavras-chave rotula vari√°veis ‚Äã‚Äãe fun√ß√µes que devem ser acess√≠veis de fora do m√≥dulo atual.
importpermite a importa√ß√£o de funcionalidades de outros m√≥dulos.
Por exemplo, se tivermos um arquivo sayHi.jsexportando uma fun√ß√£o:

// üìÅ sayHi.js
export function sayHi(user) {
  alert(`Hello, ${user}!`);
}

‚Ä¶Em seguida, outro arquivo pode ser importado e usado:

// üìÅ main.js
import {sayHi} from './sayHi.js';

alert(sayHi); // function...
sayHi('John'); // Hello, John!
A importdiretiva carrega o m√≥dulo pelo caminho ./sayHi.jsrelativo ao arquivo atual e atribui a fun√ß√£o exportada sayHi√† vari√°vel correspondente.

Vamos executar o exemplo no navegador.

Como os m√≥dulos suportam palavras-chave e recursos especiais, devemos informar ao navegador que um script deve ser tratado como um m√≥dulo, usando o atributo <script type="module">.

Assim:

*/

// index.html

/*

<!doctype html>
<script type="module">
  import {sayHi} from './say.js';

  document.body.innerHTML = sayHi('John');
</script>

*/

// dizer.js

export function sayHi(user) {
   return `Hello, ${user}!`;
}

/*

O navegador busca e avalia automaticamente o m√≥dulo importado (e suas importa√ß√µes, se necess√°rio) e, em seguida, executa o script.

Os m√≥dulos funcionam apenas via HTTP(s), n√£o localmente
Se voc√™ tentar abrir uma p√°gina da Web localmente, via file://protocolo, ver√° que import/exportas diretivas n√£o funcionam. Use um servidor da Web local, como servidor est√°tico ou use o recurso ‚Äúservidor ao vivo‚Äù do seu editor, como VS Code Live Server Extension para testar m√≥dulos.

Recursos principais do m√≥dulo
O que h√° de diferente nos m√≥dulos em compara√ß√£o com os scripts ‚Äúregulares‚Äù?

Existem recursos b√°sicos, v√°lidos tanto para o navegador quanto para o JavaScript do lado do servidor.

Sempre ‚Äúuse estrito‚Äù
Os m√≥dulos sempre funcionam em modo estrito. Por exemplo, atribuir a uma vari√°vel n√£o declarada causar√° um erro.

<script type="module">
  a = 5; // error
</script>
Escopo no n√≠vel do m√≥dulo
Cada m√≥dulo tem seu pr√≥prio escopo de n√≠vel superior. Em outras palavras, vari√°veis ‚Äã‚Äãe fun√ß√µes de n√≠vel superior de um m√≥dulo n√£o s√£o vistas em outros scripts.

No exemplo abaixo, dois scripts s√£o importados e hello.jstentam usar a uservari√°vel declarada em user.js. Ele falha, porque √© um m√≥dulo separado (voc√™ ver√° o erro no console):

*/

// index.html

/*

<!doctype html>
<script type="module" src="user.js"></script>
<script type="module" src="hello.js"></script>

*/

// usu√°rio.js

let user = "John";

// ola.js

alert(user); // no such variable (each module has independent variables)

/*

Os m√≥dulos devem exportser acess√≠veis de fora e importo que eles precisam.

user.jsdeve exportar a uservari√°vel.
hello.jsdeve import√°-lo do user.jsm√≥dulo.
Em outras palavras, com m√≥dulos usamos import/export em vez de depender de vari√°veis ‚Äã‚Äãglobais.

Esta √© a variante correta:

*/

// index.html

/*

<!doctype html>
<script type="module" src="hello.js"></script>

*/

// usu√°rio.js

export let user2 = "John";

// ola.js

import {user2} from './user.js';

document.body.innerHTML = user2; // John

/*

No navegador, se falamos de p√°ginas HTML, tamb√©m existe um escopo de n√≠vel superior independente para cada arquivo <script type="module">.

Aqui est√£o dois scripts na mesma p√°gina, ambos type="module". Eles n√£o veem as vari√°veis ‚Äã‚Äãde n√≠vel superior uns dos outros:

<script type="module">
  // The variable is only visible in this module script
  let user = "John";
</script>

<script type="module">
  alert(user); // Error: user is not defined
</script>

Observe:
No navegador, podemos tornar global uma vari√°vel em n√≠vel de janela, atribuindo-a explicitamente a uma windowpropriedade, por exemplo, window.user = "John".

Ent√£o, todos os scripts o ver√£o, com type="module"e sem ele.

Dito isto, fazer tais vari√°veis ‚Äã‚Äãglobais √© desaprovado. Por favor, tente evit√°-los.

Um c√≥digo de m√≥dulo √© avaliado apenas na primeira vez quando importado
Se o mesmo m√≥dulo for importado para v√°rios outros m√≥dulos, seu c√≥digo ser√° executado apenas uma vez, na primeira importa√ß√£o. Em seguida, suas exporta√ß√µes s√£o dadas a todos os outros importadores.

A avalia√ß√£o pontual tem consequ√™ncias importantes, √†s quais devemos estar atentos.

Vejamos alguns exemplos.

Primeiro, se executar um c√≥digo de m√≥dulo traz efeitos colaterais, como mostrar uma mensagem, import√°-lo v√°rias vezes o acionar√° apenas uma vez - a primeira vez:

// üìÅ alert.js
alert("Module is evaluated!");

// Import the same module from different files

// üìÅ 1.js
import `./alert.js`; // Module is evaluated!

// üìÅ 2.js
import `./alert.js`; // (shows nothing)
A segunda importa√ß√£o n√£o mostra nada, porque o m√≥dulo j√° foi avaliado.

H√° uma regra: o c√≥digo do m√≥dulo de n√≠vel superior deve ser usado para inicializa√ß√£o, cria√ß√£o de estruturas de dados internas espec√≠ficas do m√≥dulo. Se precisarmos tornar algo que pode ser chamado v√°rias vezes, devemos export√°-lo como uma fun√ß√£o, como fizemos sayHiacima.

Agora, vamos considerar um exemplo mais profundo.

Digamos que um m√≥dulo exporte um objeto:

// üìÅ admin.js
export let admin = {
  name: "John"
};
Se este m√≥dulo for importado de v√°rios arquivos, o m√≥dulo √© avaliado apenas na primeira vez, o adminobjeto √© criado e passado para todos os outros importadores.

Todos os importadores obt√™m exatamente o √∫nico adminobjeto:

// üìÅ 1.js
import {admin} from './admin.js';
admin.name = "Pete";

// üìÅ 2.js
import {admin} from './admin.js';
alert(admin.name); // Pete

// Both 1.js and 2.js reference the same admin object
// Changes made in 1.js are visible in 2.js
Como voc√™ pode ver, quando 1.jsaltera a namepropriedade no importado admin, 2.jspode ver o novo admin.name.

Isso porque o m√≥dulo √© executado apenas uma vez. As exporta√ß√µes s√£o geradas e, em seguida, s√£o compartilhadas entre os importadores, portanto, se algo alterar o adminobjeto, outros importadores ver√£o isso.

Na verdade, esse comportamento √© muito conveniente, pois permite configurar m√≥dulos.

Em outras palavras, um m√≥dulo pode fornecer uma funcionalidade gen√©rica que precisa de uma configura√ß√£o. Por exemplo, a autentica√ß√£o precisa de credenciais. Em seguida, ele pode exportar um objeto de configura√ß√£o esperando que o c√≥digo externo seja atribu√≠do a ele.

Aqui est√° o padr√£o cl√°ssico:

1. Um m√≥dulo exporta alguns meios de configura√ß√£o, por exemplo, um objeto de configura√ß√£o.
2. Na primeira importa√ß√£o, inicializamos, escrevemos em suas propriedades. O script de aplicativo de n√≠vel superior pode fazer isso.
3. Outras importa√ß√µes usam o m√≥dulo.

Por exemplo, o admin.jsm√≥dulo pode fornecer certa funcionalidade (por exemplo, autentica√ß√£o), mas espera que as credenciais entrem no configobjeto de fora:

// üìÅ admin.js
export let config = { };

export function sayHi() {
  alert(`Ready to serve, ${config.user}!`);
}
Aqui, admin.jsexporta o configobjeto (inicialmente vazio, mas tamb√©m pode ter propriedades padr√£o).

Ent√£o em init.js, o primeiro script do nosso app, importamos configdele e configuramos config.user:

// üìÅ init.js
import {config} from './admin.js';
config.user = "Pete";
‚Ä¶Agora o m√≥dulo admin.jsest√° configurado.

Outros importadores podem cham√°-lo e ele mostra corretamente o usu√°rio atual:

// üìÅ another.js
import {sayHi} from './admin.js';

sayHi(); // Ready to serve, Pete!
import.meta
O objeto import.metacont√©m as informa√ß√µes sobre o m√≥dulo atual.

Seu conte√∫do depende do ambiente. No navegador, ele cont√©m o URL do script ou o URL de uma p√°gina da Web atual, se estiver dentro do HTML:

<script type="module">
  alert(import.meta.url); // script URL
  // for an inline script - the URL of the current HTML-page
</script>

Em um m√≥dulo, ‚Äúisto‚Äù √© indefinido
Esse √© um recurso menor, mas, para completar, devemos mencion√°-lo.

Em um m√≥dulo, o n√≠vel superior this√© indefinido.

Compare-o com scripts n√£o modulares, onde this√© um objeto global:

<script>
  alert(this); // window
</script>

<script type="module">
  alert(this); // undefined
</script>

Recursos espec√≠ficos do navegador
Existem tamb√©m v√°rias diferen√ßas de scripts espec√≠ficas do navegador em type="module"compara√ß√£o com os regulares.

Voc√™ pode pular esta se√ß√£o por enquanto se estiver lendo pela primeira vez ou se n√£o usar JavaScript em um navegador.

Os scripts do m√≥dulo s√£o adiados
Os scripts do m√≥dulo s√£o sempre adiados, mesmo efeito do deferatributo (descrito no cap√≠tulo Scripts: async, defer ), para scripts externos e inline.

Em outras palavras:

baixar scripts de m√≥dulos externos <script type="module" src="...">n√£o bloqueia o processamento de HTML, eles carregam em paralelo com outros recursos.
os scripts do m√≥dulo esperam at√© que o documento HTML esteja totalmente pronto (mesmo que sejam pequenos e carreguem mais r√°pido que o HTML) e, em seguida, executem.
a ordem relativa dos scripts √© mantida: os scripts que v√£o primeiro no documento, executam primeiro.
Como efeito colateral, os scripts de m√≥dulo sempre ‚Äúv√™em‚Äù a p√°gina HTML totalmente carregada, incluindo os elementos HTML abaixo deles.

Por exemplo:

<script type="module">
  alert(typeof button); // object: the script can 'see' the button below
  // as modules are deferred, the script runs after the whole page is loaded
</script>

Compare to regular script below:

<script>
  alert(typeof button); // button is undefined, the script can't see elements below
  // regular scripts run immediately, before the rest of the page is processed
</script>

<button id="button">Button</button>

Observa√ß√£o: na verdade, o segundo script √© executado antes do primeiro! Ent√£o veremos undefinedprimeiro, e depois object.

Isso porque os m√≥dulos s√£o diferidos, ent√£o esperamos o documento ser processado. O script regular √© executado imediatamente, ent√£o vemos sua sa√≠da primeiro.

Ao usar m√≥dulos, devemos estar cientes de que a p√°gina HTML aparece √† medida que carrega e os m√≥dulos JavaScript s√£o executados depois disso, para que o usu√°rio possa ver a p√°gina antes que o aplicativo JavaScript esteja pronto. Algumas funcionalidades podem n√£o funcionar ainda. Devemos colocar ‚Äúindicadores de carregamento‚Äù, ou ent√£o garantir que o visitante n√£o se confunda com isso.

Async funciona em scripts embutidos
Para scripts n√£o modulares, o asyncatributo funciona apenas em scripts externos. Os scripts ass√≠ncronos s√£o executados imediatamente quando prontos, independentemente de outros scripts ou do documento HTML.

Para scripts de m√≥dulo, ele tamb√©m funciona em scripts embutidos.

Por exemplo, o script embutido abaixo tem async, ent√£o n√£o espera por nada.

Ele realiza a importa√ß√£o (fetches ./analytics.js) e executa quando pronto, mesmo que o documento HTML ainda n√£o esteja finalizado, ou que outros scripts ainda estejam pendentes.

Isso √© bom para funcionalidades que n√£o dependem de nada, como contadores, an√∫ncios, ouvintes de eventos em n√≠vel de documento.

<!-- all dependencies are fetched (analytics.js), and the script runs -->
<!-- doesn't wait for the document or other <script> tags -->
<script async type="module">
  import {counter} from './analytics.js';

  counter.count();
</script>

Scripts externos
Os scripts externos que possuem type="module"s√£o diferentes em dois aspectos:

1. Scripts externos com o mesmo srcrodam apenas uma vez:

<!-- the script my.js is fetched and executed only once -->
<script type="module" src="my.js"></script>
<script type="module" src="my.js"></script>

2. ripts externos que s√£o buscados de outra origem (por exemplo, outro site) requerem cabe√ßalhos CORS , conforme descrito no cap√≠tulo Busca: Solicita√ß√µes entre origens . Em outras palavras, se um script de m√≥dulo for obtido de outra origem, o servidor remoto dever√° fornecer um cabe√ßalho Access-Control-Allow-Originque permita a busca.

<!-- another-site.com must supply Access-Control-Allow-Origin -->
<!-- otherwise, the script won't execute -->
<script type="module" src="http://another-site.com/their.js"></script>
Isso garante melhor seguran√ßa por padr√£o.

N√£o s√£o permitidos m√≥dulos ‚Äúvazios‚Äù
No navegador, importdeve obter um URL relativo ou absoluto. M√≥dulos sem nenhum caminho s√£o chamados de m√≥dulos ‚Äúbare‚Äù. Esses m√≥dulos n√£o s√£o permitidos em arquivos import.

Por exemplo, isso import√© inv√°lido:

import {sayHi} from 'sayHi'; // Error, "bare" module
// the module must have a path, e.g. './sayHi.js' or wherever the module is
Certos ambientes, como Node.js ou ferramentas de pacote, permitem m√≥dulos simples, sem nenhum caminho, pois eles t√™m suas pr√≥prias maneiras de encontrar m√≥dulos e ganchos para ajust√°-los. Mas os navegadores ainda n√£o suportam m√≥dulos simples.

Compatibilidade, ‚Äúnomodule‚Äù
Navegadores antigos n√£o entendem type="module". Scripts de um tipo desconhecido s√£o simplesmente ignorados. Para eles, √© poss√≠vel fornecer um fallback usando o nomoduleatributo:

<script type="module">
  alert("Runs in modern browsers");
</script>

<script nomodule>
  alert("Modern browsers know both type=module and nomodule, so skip this")
  alert("Old browsers ignore script with unknown type=module, but execute this.");
</script>

ferramentas de constru√ß√£o
Na vida real, os m√≥dulos do navegador raramente s√£o usados ‚Äã‚Äãem sua forma ‚Äúbruta‚Äù. Normalmente, n√≥s os agrupamos com uma ferramenta especial, como o Webpack , e os implantamos no servidor de produ√ß√£o.

Um dos benef√≠cios de usar bundlers ‚Äì eles d√£o mais controle sobre como os m√≥dulos s√£o resolvidos, permitindo m√≥dulos simples e muito mais, como m√≥dulos CSS/HTML.

As ferramentas de compila√ß√£o fazem o seguinte:

1. Pegue um m√≥dulo ‚Äúprincipal‚Äù, aquele que se pretende colocar<script type="module"> em HTML.

2. Analise suas depend√™ncias: importa√ß√µes e depois importa√ß√µes de importa√ß√µes etc.

3. Crie um √∫nico arquivo com todos os m√≥dulos (ou v√°rios arquivos, que podem ser ajustados), substituindo nativosimport chamadas nativas por fun√ß√µes do bundler, para que funcione. Tipos de m√≥dulos ‚Äúespeciais‚Äù como m√≥dulos HTML/CSS tamb√©m s√£o suportados.

4. No processo, outras transforma√ß√µes e otimiza√ß√µes podem ser aplicadas:
C√≥digo inacess√≠vel removido.
Exporta√ß√µes n√£o utilizadas removidas (‚Äútremor de √°rvore‚Äù).
Declara√ß√µes espec√≠ficas de desenvolvimento como consolee debuggerremovidas.
A sintaxe moderna e de ponta do JavaScript pode ser transformada em uma mais antiga com funcionalidade semelhante usando o Babel .
O arquivo resultante √© reduzido (espa√ßos removidos, vari√°veis ‚Äã‚Äãsubstitu√≠das por nomes mais curtos, etc).

Se usarmos ferramentas de pacote, √† medida que os scripts s√£o agrupados em um √∫nico arquivo (ou alguns arquivos), import/exportas instru√ß√µes dentro desses scripts s√£o substitu√≠das por fun√ß√µes especiais do bundler. Portanto, o script ‚Äúempacotado‚Äù resultante n√£o cont√©m nenhum import/export, n√£o requer type="module", e podemos coloc√°-lo em um script regular:

<!-- Assuming we got bundle.js from a tool like Webpack -->
<script src="bundle.js"></script>
Dito isto, os m√≥dulos nativos tamb√©m s√£o utiliz√°veis. Portanto, n√£o usaremos o Webpack aqui: voc√™ pode configur√°-lo mais tarde.

Resumo
Resumindo, os conceitos b√°sicos s√£o:

1. Um m√≥dulo √© um arquivo. Para import/exportfuncionar, os navegadores precisam<script type="module"> . Os m√≥dulos t√™m v√°rias diferen√ßas:
Adiado por padr√£o.
Async funciona em scripts embutidos.
Para carregar scripts externos de outra origem (dom√≠nio/protocolo/porta), s√£o necess√°rios cabe√ßalhos CORS.
Scripts externos duplicados s√£o ignorados.

2. Os m√≥dulos t√™m seu pr√≥prio escopo local de n√≠vel superior e funcionalidade de interc√¢mbio via import/export.

3. M√≥dulos sempre use strict.

4. O c√≥digo do m√≥dulo √© executado apenas uma vez. As exporta√ß√µes s√£o criadas uma vez e compartilhadas entre os importadores.

Quando usamos m√≥dulos, cada m√≥dulo implementa a funcionalidade e a exporta. Em seguida, usamos importpara import√°-lo diretamente para onde √© necess√°rio. O navegador carrega e avalia os scripts automaticamente.

Na produ√ß√£o, as pessoas costumam usar empacotadores como o Webpack para agrupar m√≥dulos para desempenho e outros motivos.

No pr√≥ximo cap√≠tulo veremos mais exemplos de m√≥dulos, e como as coisas podem ser exportadas/importadas.

*/

