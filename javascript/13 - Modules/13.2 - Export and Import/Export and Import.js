/*

Exportar e importar
As diretivas de exporta√ß√£o e importa√ß√£o t√™m diversas variantes de sintaxe.

No artigo anterior vimos um uso simples, agora vamos explorar mais exemplos.

Exportar antes das declara√ß√µes
Podemos rotular qualquer declara√ß√£o como exportada colocando exportantes dela, seja uma vari√°vel, fun√ß√£o ou classe.

Por exemplo, aqui todas as exporta√ß√µes s√£o v√°lidas:

// export an array
export let months = ['Jan', 'Feb', 'Mar','Apr', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];

// export a constant
export const MODULES_BECAME_STANDARD_YEAR = 2015;

// export a class
export class User {
  constructor(name) {
    this.name = name;
  }
}

Sem ponto-e-v√≠rgula ap√≥s exportar classe/fun√ß√£o
Observe que exportantes de uma classe ou uma fun√ß√£o n√£o a torna uma express√£o de fun√ß√£o . Ainda √© uma declara√ß√£o de fun√ß√£o, embora exportada.

A maioria dos guias de estilo JavaScript n√£o recomendam ponto-e-v√≠rgula ap√≥s declara√ß√µes de fun√ß√£o e classe.

√â por isso que n√£o h√° necessidade de ponto e v√≠rgula no final de export classe export function:

export function sayHi(user) {
  alert(`Hello, ${user}!`);
}  // no ; at the end

Exportar al√©m das declara√ß√µes
Al√©m disso, podemos colocar exportseparadamente.

Aqui, primeiro declaramos e depois exportamos:

// üìÅ say.js
function sayHi(user) {
  alert(`Hello, ${user}!`);
}

function sayBye(user) {
  alert(`Bye, ${user}!`);
}

export {sayHi, sayBye}; // a list of exported variables
‚Ä¶Ou, tecnicamente, poder√≠amos colocar exportas fun√ß√µes acima tamb√©m.

Importar *
Normalmente, colocamos uma lista do que importar entre chaves import {...}, assim:

Exportar al√©m das declara√ß√µes
Al√©m disso, podemos colocar exportseparadamente.

Aqui, primeiro declaramos e depois exportamos:

// üìÅ say.js
function sayHi(user) {
  alert(`Hello, ${user}!`);
}

function sayBye(user) {
  alert(`Bye, ${user}!`);
}

export {sayHi, sayBye}; // a list of exported variables
‚Ä¶Ou, tecnicamente, poder√≠amos colocar exportas fun√ß√µes acima tamb√©m.

Importar *
Normalmente, colocamos uma lista do que importar entre chaves import {...}, assim:

// üìÅ main.js
import * as say from './say.js';

say.sayHi('John');
say.sayBye('John');

√Ä primeira vista, ‚Äúimportar tudo‚Äù parece uma coisa t√£o legal, curta para escrever, por que dever√≠amos listar explicitamente o que precisamos importar?

Bem, existem algumas raz√µes.

1. Listar explicitamente o que importar fornece nomes mais curtos: sayHi()em vez de say.sayHi().
2. A lista expl√≠cita de importa√ß√µes fornece uma vis√£o geral melhor da estrutura do c√≥digo: o que √© usado e onde. Isso facilita o suporte ao c√≥digo e a refatora√ß√£o.

N√£o tenha medo de importar demais
Ferramentas de compila√ß√£o modernas, como webpack e outras, agrupam m√≥dulos e os otimizam para acelerar o carregamento. Eles tamb√©m removeram as importa√ß√µes n√£o utilizadas.

Por exemplo, se voc√™ import * as libraryusar uma grande biblioteca de c√≥digos e usar apenas alguns m√©todos, os n√£o utilizados n√£o ser√£o inclu√≠dos no pacote otimizado.

Importar ‚Äúcomo‚Äù
Tamb√©m podemos usar aspara importar com nomes diferentes.

Por exemplo, vamos importar sayHipara a vari√°vel local hipara abreviar e importar sayByecomo bye:

// üìÅ main.js
import {sayHi as hi, sayBye as bye} from './say.js';

hi('John'); // Hello, John!
bye('John'); // Bye, John!
Exportar ‚Äúcomo‚Äù

A sintaxe semelhante existe para export.

Vamos exportar fun√ß√µes como hie bye:

// üìÅ say.js
...
export {sayHi as hi, sayBye as bye};
Agora hie byes√£o nomes oficiais de forasteiros, para serem usados ‚Äã‚Äãnas importa√ß√µes:

// üìÅ main.js
import * as say from './say.js';

say.hi('John'); // Hello, John!
say.bye('John'); // Bye, John!
padr√£o de exporta√ß√£o
Na pr√°tica, existem basicamente dois tipos de m√≥dulos.

1. M√≥dulos que cont√™m uma biblioteca, pacote de fun√ß√µes, como say.jsacima.
2. M√≥dulos que declaram uma √∫nica entidade, por exemplo, um m√≥dulo user.jsexporta apenas arquivos class User.

Principalmente, a segunda abordagem √© preferida, de modo que cada ‚Äúcoisa‚Äù resida em seu pr√≥prio m√≥dulo.

Naturalmente, isso requer muitos arquivos, pois tudo precisa de seu pr√≥prio m√≥dulo, mas isso n√£o √© um problema. Na verdade, a navega√ß√£o de c√≥digo se torna mais f√°cil se os arquivos forem bem nomeados e estruturados em pastas.

Os m√≥dulos fornecem uma export defaultsintaxe especial (‚Äúa exporta√ß√£o padr√£o‚Äù) para fazer com que a maneira ‚Äúuma coisa por m√≥dulo‚Äù pare√ßa melhor.

Coloque export defaultantes da entidade a exportar:

// üìÅ user.js
export default class User { // just add "default"
  constructor(name) {
    this.name = name;
  }
}
Pode haver apenas um export defaultpor arquivo.

‚Ä¶E ent√£o importe-o sem chaves:

// üìÅ main.js
import User from './user.js'; // not {User}, just User

new User('John');
As importa√ß√µes sem chaves t√™m uma apar√™ncia melhor. Um erro comum ao come√ßar a usar m√≥dulos √© esquecer as chaves. Ent√£o, lembre-se, importprecisa de chaves para exporta√ß√µes nomeadas e n√£o precisa delas para a padr√£o.

exporta√ß√£o nomeada	exporta√ß√£o padr√£o
export class User {...}	export default class User {...}
import {User} from ...	import User from ...
Tecnicamente, podemos ter exporta√ß√µes padr√£o e nomeadas em um √∫nico m√≥dulo, mas na pr√°tica as pessoas geralmente n√£o as misturam. Um m√≥dulo tem exporta√ß√µes nomeadas ou padr√£o.

Como pode haver no m√°ximo uma exporta√ß√£o padr√£o por arquivo, a entidade exportada pode n√£o ter nome.

Por exemplo, todas essas s√£o exporta√ß√µes padr√£o perfeitamente v√°lidas:

export default class { // no class name
  constructor() { ... }
}
export default function(user) { // no function name
  alert(`Hello, ${user}!`);
}
// export a single value, without making a variable
export default ['Jan', 'Feb', 'Mar','Apr', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];

N√£o dar um nome √© bom, porque h√° apenas um export defaultpor arquivo, portanto, importsem chaves sabe o que importar.

Sem default, tal exporta√ß√£o daria um erro:

export class { // Error! (non-default export needs a name)
  constructor() {}
}
O nome ‚Äúpadr√£o‚Äù
Em algumas situa√ß√µes, a defaultpalavra-chave √© usada para fazer refer√™ncia √† exporta√ß√£o padr√£o.

Por exemplo, para exportar uma fun√ß√£o separadamente de sua defini√ß√£o:

function sayHi(user) {
  alert(`Hello, ${user}!`);
}

// same as if we added "export default" before the function
export {sayHi as default};

Ou, em outra situa√ß√£o, digamos que um m√≥dulo user.jsexporte uma coisa principal ‚Äúpadr√£o‚Äù e algumas nomeadas (raramente √© o caso, mas acontece):

// üìÅ user.js
export default class User {
  constructor(name) {
    this.name = name;
  }
}

export function sayHi(user) {
  alert(`Hello, ${user}!`);
}
Veja como importar a exporta√ß√£o padr√£o junto com uma nomeada:

// üìÅ main.js
import {default as User, sayHi} from './user.js';

new User('John');
E, finalmente, se importar tudo *como um objeto, a defaultpropriedade ser√° exatamente a exporta√ß√£o padr√£o:

// üìÅ main.js
import * as user from './user.js';

let User = user.default; // the default export
new User('John');
Uma palavra contra as exporta√ß√µes padr√£o
As exporta√ß√µes nomeadas s√£o expl√≠citas. Eles nomeiam exatamente o que importam, ent√£o temos essa informa√ß√£o deles; isso √© uma coisa boa.

As exporta√ß√µes nomeadas nos for√ßam a usar exatamente o nome correto para importar:

import {User} from './user.js';
// import {MyUser} won't work, the name must be {User}
‚Ä¶enquanto para uma exporta√ß√£o padr√£o, sempre escolhemos o nome ao importar:

import User from './user.js'; // works
import MyUser from './user.js'; // works too
// could be import Anything... and it'll still work

Portanto, os membros da equipe podem usar nomes diferentes para importar a mesma coisa, e isso n√£o √© bom.

Normalmente, para evitar isso e manter o c√≥digo consistente, existe uma regra que as vari√°veis ‚Äã‚Äãimportadas devem corresponder aos nomes dos arquivos, por exemplo:

import User from './user.js';
import LoginForm from './loginForm.js';
import func from '/path/to/func.js';
...
Ainda assim, algumas equipes consideram isso uma s√©ria desvantagem das exporta√ß√µes padr√£o. Portanto, eles preferem sempre usar exporta√ß√µes nomeadas. Mesmo que apenas uma √∫nica coisa seja exportada, ela ainda ser√° exportada com um nome, sem default.

Isso tamb√©m torna a reexporta√ß√£o (veja abaixo) um pouco mais f√°cil.

Reexportar
A sintaxe ‚ÄúReexportar‚Äù export ... from ...permite importar coisas e export√°-las imediatamente (possivelmente sob outro nome), assim:

export {sayHi} from './say.js'; // re-export sayHi

export {default as User} from './user.js'; // re-export default
Por que isso seria necess√°rio? Vejamos um caso de uso pr√°tico.

Imagine, estamos escrevendo um ‚Äúpacote‚Äù: uma pasta com muitos m√≥dulos, com algumas funcionalidades exportadas para fora (ferramentas como o NPM nos permitem publicar e distribuir tais pacotes, mas n√£o precisamos us√°-los), e muitos m√≥dulos s√£o apenas ‚Äúauxiliares‚Äù, para uso interno em outros m√≥dulos do pacote.

A estrutura do arquivo poderia ser assim:

auth/
    index.js
    user.js
    helpers.js
    tests/
        login.js
    providers/
        github.js
        facebook.js
        ...

Gostar√≠amos de expor a funcionalidade do pacote por meio de um √∫nico ponto de entrada.

Ou seja, quem quiser utilizar nosso pacote, dever√° importar apenas do ‚Äúarquivo principal‚Äù auth/index.js.

Assim:

import {login, logout} from 'auth/index.js'
O ‚Äúarquivo principal‚Äù auth/index.jsexporta todas as funcionalidades que gostar√≠amos de fornecer em nosso pacote.

A ideia √© que estranhos, outros programadores que usam nosso pacote, n√£o se metam em sua estrutura interna, procurem arquivos dentro da pasta do nosso pacote. Exportamos apenas o que √© necess√°rio auth/index.jse mantemos o resto escondido de olhares indiscretos.

Como a funcionalidade exportada real est√° espalhada pelo pacote, podemos import√°-la auth/index.jse export√°-la:

// üìÅ auth/index.js

// import login/logout and immediately export them
import {login, logout} from './helpers.js';
export {login, logout};

// import default as User and export it
import User from './user.js';
export {User};
...
Agora os usu√°rios do nosso pacote podemimport {login} from "auth/index.js" .

A sintaxe export ... from ...√© apenas uma nota√ß√£o mais curta para tal importa√ß√£o-exporta√ß√£o:

// üìÅ auth/index.js
// re-export login/logout
export {login, logout} from './helpers.js';

// re-export the default export as User
export {default as User} from './user.js';
...
A diferen√ßa not√°vel em export ... fromrela√ß√£o a import/export√© que os m√≥dulos reexportados n√£o est√£o dispon√≠veis no arquivo atual. Portanto, dentro do exemplo acima auth/index.js, n√£o podemos usar fun√ß√µes reexportadas login/logout.

Reexportando a exporta√ß√£o padr√£o
A exporta√ß√£o padr√£o precisa de tratamento separado ao reexportar.

Digamos que temos user.jscom o export default class Usere gostar√≠amos de reexport√°-lo:

// üìÅ user.js
export default class User {
  // ...
}
Podemos nos deparar com dois problemas com ela:

1. export User from './user.js'n√£o vai funcionar. Isso levaria a um erro de sintaxe.

Para reexportar a exporta√ß√£o padr√£o, devemos escrever export {default as User}, como no exemplo acima.

2. export * from './user.js'reexporta apenas exporta√ß√µes nomeadas, mas ignora a padr√£o.

Se quisermos reexportar as exporta√ß√µes nomeadas e padr√£o, ser√£o necess√°rias duas instru√ß√µes:

export * from './user.js'; // to re-export named exports
export {default} from './user.js'; // to re-export the default export
Essas esquisitices de reexportar uma exporta√ß√£o padr√£o s√£o uma das raz√µes pelas quais alguns desenvolvedores n√£o gostam de exporta√ß√µes padr√£o e preferem as nomeadas.

Resumo
Aqui est√£o todos os tipos deexport que abordamos neste e em artigos anteriores.

Voc√™ pode verificar a si mesmo lendo-os e lembrando-se do que eles significam:

Antes da declara√ß√£o de uma classe/fun√ß√£o/‚Ä¶:
export [default] class/function/variable ...
Exporta√ß√£o independente:
export {x [as y], ...}.
Reexportar:
export {x [as y], ...} from "module"
export * from "module"(n√£o reexporta o padr√£o).
export {default [as y]} from "module"(padr√£o de reexporta√ß√£o).

Importar:

Importando exporta√ß√µes nomeadas:
import {x [as y], ...} from "module"
Importando a exporta√ß√£o padr√£o:
import x from "module"
import {default as x} from "module"
Importar tudo:
import * as obj from "module"
Importe o m√≥dulo (seu c√≥digo √© executado), mas n√£o atribua nenhuma de suas exporta√ß√µes a vari√°veis:
import "module"
podemos colocarimport/export declara√ß√µes no in√≠cio ou no final de um script, n√£o importa.

Ent√£o, tecnicamente este c√≥digo est√° bom:

sayHi();

// ...

import {sayHi} from './say.js'; // import at the end of the file
Na pr√°tica, as importa√ß√µes geralmente est√£o no in√≠cio do arquivo, mas isso √© apenas para maior conveni√™ncia.

Observe que as instru√ß√µes de importa√ß√£o/exporta√ß√£o n√£o funcionam se estiverem dentro de arquivos {...}.

Uma importa√ß√£o condicional, como esta, n√£o funcionar√°:

if (something) {
  import {sayHi} from "./say.js"; // Error: import must be at top level
}
‚Ä¶Mas e se realmente precisarmos importar algo condicionalmente? Ou na hora certa? Tipo, carregar um m√≥dulo a pedido, quando √© realmente necess√°rio?

Veremos as importa√ß√µes din√¢micas no pr√≥ximo artigo.

*/