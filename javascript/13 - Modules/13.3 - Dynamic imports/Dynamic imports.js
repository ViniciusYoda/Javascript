/*

Importa√ß√µes din√¢micas
As instru√ß√µes de exporta√ß√£o e importa√ß√£o que abordamos nos cap√≠tulos anteriores s√£o chamadas de ‚Äúest√°ticas‚Äù. A sintaxe √© muito simples e estrita.

Primeiro, n√£o podemos gerar dinamicamente nenhum par√¢metro de import.

O caminho do m√≥dulo deve ser uma string primitiva, n√£o pode ser uma chamada de fun√ß√£o. Isso n√£o vai funcionar:

import ... from getModuleName(); // Error, only from "string" is allowed
Em segundo lugar, n√£o podemos importar condicionalmente ou em tempo de execu√ß√£o:

if(...) {
  import ...; // Error, not allowed!
}

{
  import ...; // Error, we can't put import in any block
}
Isso porque importpretendo exportfornecer um backbone para a estrutura do c√≥digo. Isso √© bom, j√° que a estrutura do c√≥digo pode ser analisada, os m√≥dulos podem ser reunidos e agrupados em um arquivo por ferramentas especiais, as exporta√ß√µes n√£o utilizadas podem ser removidas (‚Äútree-shaken‚Äù). Isso s√≥ √© poss√≠vel porque a estrutura de importa√ß√£o/exporta√ß√£o √© simples e fixa.

Mas como podemos importar um m√≥dulo dinamicamente, sob demanda?

A express√£o import()
A import(module)express√£o carrega o m√≥dulo e retorna uma promessa que resolve em um objeto de m√≥dulo que cont√©m todas as suas exporta√ß√µes. Ele pode ser chamado de qualquer lugar no c√≥digo.

Podemos us√°-lo dinamicamente em qualquer lugar do c√≥digo, por exemplo:

let modulePath = prompt("Which module to load?");

import(modulePath)
  .then(obj => <module object>)
  .catch(err => <loading error, e.g. if no such module>)
Ou poder√≠amos usar let module = await import(modulePath)if dentro de uma fun√ß√£o ass√≠ncrona.

Por exemplo, se tivermos o seguinte m√≥dulo say.js:

// üìÅ say.js
export function hi() {
  alert(`Hello`);
}

export function bye() {
  alert(`Bye`);
}
‚Ä¶Ent√£o a importa√ß√£o din√¢mica pode ser assim:

let {hi, bye} = await import('./say.js');

hi();
bye();
Ou, se say.jstiver a exporta√ß√£o padr√£o:

// üìÅ say.js
export default function() {
  alert("Module loaded (export default)!");
}
‚Ä¶Ent√£o, para acess√°-lo, podemos usar defaulta propriedade do objeto m√≥dulo:

let obj = await import('./say.js');
let say = obj.default;
// or, in one line: let {default: say} = await import('./say.js');

say();
Aqui est√° o exemplo completo:

*/

// index.html

/*

<!doctype html>
<script>
  async function load() {
    let say = await import('./say.js');
    say.hi(); // Hello!
    say.bye(); // Bye!
    say.default(); // Module loaded (export default)!
  }
</script>
<button onclick="load()">Click me</button>

*/

// dizer.js

export function hi() {
   alert(`Hello`);
}

export function bye() {
   alert(`Bye`);
}

export default function() {
   alert("Module loaded (export default)!");
}

/*

Observe:
As importa√ß√µes din√¢micas funcionam em scripts regulares, n√£o requerem arquivos script type="module".

Observe:
Embora import()pare√ßa uma chamada de fun√ß√£o, √© uma sintaxe especial que usa par√™nteses (semelhante a super()).

Portanto, n√£o podemos copiar importpara uma vari√°vel ou usar call/applycom ela. N√£o √© uma fun√ß√£o.

*/

