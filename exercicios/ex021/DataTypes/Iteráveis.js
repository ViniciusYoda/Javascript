/*

Iter√°veis
Objetos iter√°veis ‚Äã‚Äãs√£o uma generaliza√ß√£o de arrays. Esse √© um conceito que nos permite tornar qualquer objeto utiliz√°vel em um for..ofloop.

Claro, Arrays s√£o iter√°veis. Mas existem muitos outros objetos internos, que tamb√©m s√£o iter√°veis. Por exemplo, strings tamb√©m s√£o iter√°veis.

Se um objeto n√£o √© tecnicamente um array, mas representa uma cole√ß√£o (lista, conjunto) de algo, ent√£o for..of√© uma √≥tima sintaxe para fazer um loop sobre ele, ent√£o vamos ver como faz√™-lo funcionar.

S√≠mbolo.iterador
Podemos facilmente compreender o conceito de iter√°veis ‚Äã‚Äãfazendo um dos nossos.

Por exemplo, temos um objeto que n√£o √© um array, mas parece adequado para for..of.

Como um rangeobjeto que representa um intervalo de n√∫meros:

*/

let range = {
    from: 1,
    to: 5
};

// We want the for..of to work:
// for (let num of range) ... num=1,2,3,4,5

/*

Para tornar o rangeobjeto iter√°vel (e assim deixar for..offuncionar), precisamos adicionar um m√©todo ao objeto nomeado Symbol.iterator(um s√≠mbolo embutido especial apenas para isso).

1. Quando for..ofinicia, ele chama esse m√©todo uma vez (ou erros se n√£o forem encontrados). O m√©todo deve retornar um iterador ‚Äì um objeto com o m√©todo next.
2. Em diante , for..offunciona apenas com esse objeto retornado .
3. Quando for..ofquer o pr√≥ximo valor, ele chama next()esse objeto.
4. O resultado de next()deve ter a forma {done: Boolean, value: any}, onde done=truesignifica que o loop foi finalizado, caso contr√°rio value√© o pr√≥ximo valor.

Aqui est√° a implementa√ß√£o completa para rangecom observa√ß√µes

*/

let range = {
    from: 1,
    to: 5
};

// 1. call to for..of initially calls this
range[Symbol.iterator] = function() {

    // ...it returns the iterator object
    // 2. Onward, for..of works only with the iterator object below, asking it for next values
    return {
        current: this.from,
        last: this.to,

        // 3. next() is called on each iteration by the for..of loop
        next() {
            // 4. it should return the value as an object {done:.., value :...} 
            if (this.current <= this.last) {
                return { done: false, value: this.current++};
            } else {
                return { done: true };
            }
        }
    }
};

// now it works!
for (let num of range) {
    alert(num);  // 1, then 2, 3, 4, 5
}

/*

Observe o recurso principal dos iter√°veis: separa√ß√£o de interesses.

O rangepr√≥prio n√£o tem o next()m√©todo.
Em vez disso, outro objeto, o chamado ‚Äúiterador‚Äù, √© criado pela chamada para range[Symbol.iterator]()e next()gera valores para a itera√ß√£o.
Portanto, o objeto iterador √© separado do objeto sobre o qual ele itera.

Tecnicamente, podemos mescl√°-los e usar rangea si mesmo como o iterador para tornar o c√≥digo mais simples.

Assim:

*/

let range = {
    from: 1,
    to: 5,

    [Symbol.iterator]() {
        this.current = this.from;
        return this;
    },

    next() {
        if (this.current <= this.to) {
            return { done: false, value: this.current++ };
        } else {
            return { done: true };
        }
    }
};

for (let num of range) {
    alert(num); // 1, then 2, 3, 4, 5
}

/*

Agora range[Symbol.iterator]()retorna o rangepr√≥prio objeto: ele tem o next()m√©todo necess√°rio e lembra o progresso da itera√ß√£o atual em this.current. Mais curta? Sim. E √†s vezes tudo bem tamb√©m.

A desvantagem √© que agora √© imposs√≠vel ter dois for..ofloops rodando sobre o objeto simultaneamente: eles compartilhar√£o o estado de itera√ß√£o, porque h√° apenas um iterador ‚Äì o pr√≥prio objeto. Mas dois for-ofs paralelos s√£o uma coisa rara, mesmo em cen√°rios ass√≠ncronos.

Iteradores infinitos
Iteradores infinitos tamb√©m s√£o poss√≠veis. Por exemplo, o rangetorna-se infinito para range.to = Infinity. Ou podemos fazer um objeto iter√°vel que gera uma sequ√™ncia infinita de n√∫meros pseudoaleat√≥rios. Tamb√©m pode ser √∫til.

N√£o h√° limita√ß√µes em next, ele pode retornar mais e mais valores, isso √© normal.

Claro, o for..ofloop sobre tal iter√°vel seria intermin√°vel. Mas sempre podemos par√°-lo usando break.

A string √© iter√°vel
Arrays e strings s√£o os iter√°veis ‚Äã‚Äãinternos mais usados.

Para uma string, faz um for..ofloop sobre seus caracteres:

*/

for (let char of "test") {
    // triggers 4 times: once for each character
    alert( char ); // t, then e, then, s, then t
}

// E funciona corretamente com pares substitutos!

let str = 'ùí≥üòÇ';
for (let char of str){
    alert(char); // ùí≥, and then üòÇ
}