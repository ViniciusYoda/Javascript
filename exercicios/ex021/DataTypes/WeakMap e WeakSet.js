/*

WeakMap e WeakSet
Como sabemos do cap√≠tulo Coleta de lixo , o mecanismo JavaScript mant√©m um valor na mem√≥ria enquanto est√° ‚Äúalcan√ß√°vel‚Äù e pode potencialmente ser usado.

Por exemplo:

*/

let john = { name: "John" };

// the object can be accessed, john is the reference to it

// overwrite the reference
john = null;

// the object will be removed from memory

/*

Normalmente, as propriedades de um objeto ou elementos de uma matriz ou outra estrutura de dados s√£o consideradas alcan√ß√°veis ‚Äã‚Äãe mantidas na mem√≥ria enquanto essa estrutura de dados est√° na mem√≥ria.

Por exemplo, se colocarmos um objeto em uma matriz, enquanto a matriz estiver ativa, o objeto tamb√©m estar√° ativo, mesmo que n√£o haja outras refer√™ncias a ele.

Assim:

*/

let john = { name: "John" };

let array = [ john ];

john = null; // overwrite the reference

// the object previously referenced by john is stored inside the array
// therefore it won't be garbage-collected
// we can get it as array[0]

/*

Semelhante a isso, se usarmos um objeto como chave em um regular Map, enquanto o Mapexistir, esse objeto tamb√©m existir√°. Ele ocupa mem√≥ria e n√£o pode ser coletado como lixo.

Por exemplo:

*/

let john = { name: "John" };

let map = new Map();
map.set(john, "...");

john = null; // overwrite the reference

// john is stored inside the map,
// we can get it by using map.keys()

/*

WeakMap√© fundamentalmente diferente neste aspecto. Ele n√£o impede a coleta de lixo de objetos-chave.

Vamos ver o que isso significa em exemplos.

Mapa fraco
A primeira diferen√ßa entre Mape WeakMap√© que as chaves devem ser objetos, n√£o valores primitivos:

*/

let weakMap = new WeakMap();

let obj = {};

weakMap.set(obj, "ok"); // works fine (object key)

// can't use a string as the key
weakMap.set("test", "Whoops"); // Error, because "test" is not an object

// Agora, se usarmos um objeto como chave nele, e n√£o houver outras refer√™ncias a esse objeto - ele ser√° removido da mem√≥ria (e do mapa) automaticamente.

let john = { name: "John" };

let weakMap = new WeakMap();
weakMap.set(john, "...");

john = null; // overwrite the reference

// john is removed from memory!

/*

Compare-o com o exemplo normal Mapacima. Agora, se johnexistir apenas como a chave de WeakMap‚Äì ela ser√° exclu√≠da automaticamente do mapa (e da mem√≥ria).

WeakMapn√£o suporta itera√ß√£o e m√©todos keys(), values(), entries(), ent√£o n√£o h√° como obter todas as chaves ou valores dele.

WeakMaptem apenas os seguintes m√©todos:

weakMap.set(key, value)
weakMap.get(key)
weakMap.delete(key)
weakMap.has(key)
Por que tal limita√ß√£o? Isso por raz√µes t√©cnicas. Se um objeto perdeu todas as outras refer√™ncias (como johnno c√≥digo acima), ele deve ser coletado como lixo automaticamente. Mas tecnicamente n√£o √© exatamente especificado quando a limpeza acontece .

O mecanismo JavaScript decide isso. Ele pode optar por realizar a limpeza de mem√≥ria imediatamente ou aguardar e fazer a limpeza posteriormente quando ocorrerem mais exclus√µes. Portanto, tecnicamente, a contagem atual de elementos de a WeakMapn√£o √© conhecida. O motor pode ter limpado ou n√£o, ou o fez parcialmente. Por esse motivo, os m√©todos que acessam todas as chaves/valores n√£o s√£o suportados.

Agora, onde precisamos de tal estrutura de dados?

Caso de uso: dados adicionais
A principal √°rea de aplica√ß√£o WeakMap√© um armazenamento de dados adicional .

Se estivermos trabalhando com um objeto que ‚Äúpertence‚Äù a outro c√≥digo, talvez at√© uma biblioteca de terceiros, e gostar√≠amos de armazenar alguns dados associados a ele, isso deve existir apenas enquanto o objeto estiver vivo ‚Äì ent√£o WeakMap√© exatamente o que √© necess√°rio .

Colocamos os dados em um WeakMap, usando o objeto como chave, e quando o objeto √© coletado como lixo, esses dados tamb√©m desaparecem automaticamente.

*/

weakMap.set(john, "secret documents");
// if john dies, secret documents will be destroyed automatically

/*

Vejamos um exemplo.

Por exemplo, temos um c√≥digo que mant√©m uma contagem de visitas para os usu√°rios. As informa√ß√µes s√£o armazenadas em um mapa: um objeto de usu√°rio √© a chave e a contagem de visitas √© o valor. Quando um usu√°rio sai (seu objeto √© coletado como lixo), n√£o queremos mais armazenar sua contagem de visitas.

Aqui est√° um exemplo de uma fun√ß√£o de contagem com Map:

*/

// üìÅ visitsCount.js
let visitsCountMap = new Map(); // map: user => visits count

// increase the visits count
function countUser(user) {
    let count = visitsCountMap.get(user) || 0;
    visitsCountMap.set(user, count + 1);
}

// E aqui est√° outra parte do c√≥digo, talvez outro arquivo usando:

// üìÅ main.js
let john = { name: "John" };

countUser(john); // count his visits

// later jogn leaves us
john = null;

/*

Agora, johno objeto deve ser coletado como lixo, mas permanece na mem√≥ria, pois √© uma chave no visitsCountMap.

Precisamos limpar visitsCountMapquando removemos usu√°rios, caso contr√°rio, ele crescer√° na mem√≥ria indefinidamente. Essa limpeza pode se tornar uma tarefa tediosa em arquiteturas complexas.

Podemos evit√°-lo mudando para WeakMap:

*/

// üìÅ visitsCount.js
let visitsCountMap = new WeakMap(); // weakmap: user => visits count


// increase the visits count
function countUser(user) {
    let count = visitsCountMap.get(user) || 0;
    visitsCountMap.set(user, count + 1);
}

/*

Agora n√£o temos que limpar visitsCountMap. Depois johnque o objeto se torna inacess√≠vel, por todos os meios, exceto como uma chave de WeakMap, ele √© removido da mem√≥ria, juntamente com as informa√ß√µes dessa chave de WeakMap.

Caso de uso: cache
Outro exemplo comum √© o cache. Podemos armazenar (‚Äúcache‚Äù) os resultados de uma fun√ß√£o, para que chamadas futuras no mesmo objeto possam reutiliz√°-lo.

Para conseguir isso, podemos usar Map(cen√°rio n√£o ideal):

*/

// üìÅ cache.js
let cache = new Map();

// calculate and remember the result
function process(obj) {
    if (!cache.has(obj)) {
        let result = /* calculations of the result for */ obj;

        cache.set(obj, result);
        return result;
    }

    return cache.get(obj);
}

// Now we use process() in another file:

// üìÅ main.js
let obj = {/* let¬¥s say we have an object */};

let result1 = process(obj); // calculated

// ...later, from another place of the code...
let result2 = process(obj); // remembered result taken from cache

// ...later, when the object is not needed any more:
obj = null;

alert(cache.size); // 1 (Ouch! The object is still in cache, taking memory!)

/*

Para v√°rias chamadas de process(obj)com o mesmo objeto, ele calcula apenas o resultado na primeira vez e, em seguida, apenas o obt√©m de cache. A desvantagem √© que precisamos limpar cachequando o objeto n√£o √© mais necess√°rio.

Se substituirmos Mappor WeakMap, esse problema desaparecer√°. O resultado armazenado em cache ser√° removido da mem√≥ria automaticamente depois que o objeto for coletado como lixo.

*/

// üìÅ cache.js
let cache = new WeakMap();

// calculate and remember the result
function process(obj) {
    if (!cache.has(obj)) {
        let result = /* calculate the result for */ obj;

        cache.set(obj, result);
        return result
    }

    return cache.get(obj);
}

// üìÅ main.js
let obj = {/* some object */};

let result1 = process(obj);
let result2 = process(obj);

// ...later, when the object is not needed any more:
obj = null;

// Can't get cache.size, as it's a WeakMap,
// but it's 0 or soon be 0
// When obj gets garbage collected, cached data will be removed as well

/*

Conjunto fraco
WeakSetse comporta da mesma forma:

√â an√°logo a Set, mas s√≥ podemos adicionar objetos a WeakSet(n√£o a primitivos).
Um objeto existe no conjunto enquanto √© alcan√ß√°vel de outro lugar.
Como Set, ele suporta add, hase delete, mas n√£o size, keys()e nenhuma itera√ß√£o.
Sendo ‚Äúfraco‚Äù, tamb√©m serve como armazenamento adicional. Mas n√£o para dados arbitr√°rios, mas sim para fatos ‚Äúsim/n√£o‚Äù. Uma associa√ß√£o em WeakSetpode significar algo sobre o objeto.

Por exemplo, podemos adicionar usu√°rios a WeakSetpara acompanhar quem visitou nosso site:

*/

let visitedSet = new WeakSet();

let john = { name: "John" };
let pete = { name: "Pete" };
let mary = { name: "Mary" };

visitedSet.add(john); // John visited us
visitedSet.add(pete); // Then Pete
visitedSet.add(john); // John again

// visitedSet has 2 users now

// check if John visited?
alert(visitedSet.has(john)); // true

// check if Mary visited?
alert(visitedSet.has(mary)); false

john = null;

// visitedSet will be cleaned automatically

/*

A limita√ß√£o mais not√°vel de WeakMape WeakSet√© a aus√™ncia de itera√ß√µes e a incapacidade de obter todo o conte√∫do atual. Isso pode parecer inconveniente, mas n√£o impede WeakMap/WeakSetde fazer seu trabalho principal ‚Äì ser um armazenamento ‚Äúadicional‚Äù de dados para objetos que s√£o armazenados/gerenciados em outro local.

Resumo
WeakMap√© Map-like cole√ß√£o que permite apenas objetos como chaves e os remove junto com o valor associado, uma vez que eles se tornam inacess√≠veis por outros meios.

WeakSet√© Set-como uma cole√ß√£o que armazena apenas objetos e os remove quando eles se tornam inacess√≠veis por outros meios.

Suas principais vantagens s√£o que eles t√™m fraca refer√™ncia a objetos, de modo que podem ser facilmente removidos pelo coletor de lixo.

Isso vem ao custo de n√£o ter suporte para clear, size, keys, values‚Ä¶

WeakMape WeakSets√£o usados ‚Äã‚Äãcomo estruturas de dados ‚Äúsecund√°rias‚Äù, al√©m do armazenamento de objetos ‚Äúprim√°rio‚Äù. Depois que o objeto for removido do armazenamento prim√°rio, se ele for encontrado apenas como a chave de WeakMapou em um WeakSet, ele ser√° limpo automaticamente.

*/

