/*

String

Em JavaScript, os dados textuais s√£o armazenados como strings. N√£o h√° tipo separado para um √∫nico caractere.

O formato interno para strings √© sempre UTF-16 , n√£o est√° vinculado √† codifica√ß√£o da p√°gina.

Cita√ß√µes
Vamos relembrar os tipos de cita√ß√µes.

As strings podem ser colocadas entre aspas simples, aspas duplas ou acentos graves:

*/

let single = 'single-quoted';
let double = "double-quoted";

let backticks = `backticks`

// Aspas simples e duplas s√£o essencialmente as mesmas. Backticks, no entanto, nos permitem incorporar qualquer express√£o na string, envolvendo-a em ${‚Ä¶}:

function sum(a, b){
    return a + b;
}

alert(`1 + 2 = ${sum(1, 2)}.`); // 1 + 2 = 3.

// Outra vantagem de usar backticks √© que eles permitem que uma string se estenda por v√°rias linhas:

let guestList = `Guests:
    * John
    * Pete
    * Mary
`;

alert(guestList); // a list of guests, multiple lines

/*

Parece natural, certo? Mas aspas simples ou duplas n√£o funcionam dessa maneira.

Se os usarmos e tentarmos usar v√°rias linhas, ocorrer√° um erro:

*/

let guestList = "Guest: // Error: Unexpected token ILLEGAL
    * John";

/*

Aspas simples e duplas v√™m desde os tempos antigos da cria√ß√£o de idiomas, quando a necessidade de strings de v√°rias linhas n√£o era levada em considera√ß√£o. Backticks apareceram muito mais tarde e, portanto, s√£o mais vers√°teis.

Os acentos graves tamb√©m nos permitem especificar uma ‚Äúfun√ß√£o de modelo‚Äù antes do primeiro acento grave. A sintaxe √©: func`string`. A fun√ß√£o func√© chamada automaticamente, recebe a string e as express√µes incorporadas e pode process√°-las. Isso √© chamado de ‚Äúmodelos marcados‚Äù. Esse recurso facilita a implementa√ß√£o de modelos personalizados, mas raramente √© usado na pr√°tica. Voc√™ pode ler mais sobre isso no manual .

Caracteres especiais

Ainda √© poss√≠vel criar strings de v√°rias linhas com aspas simples e duplas usando o chamado ‚Äúcaracter de nova linha‚Äù, escrito como \n, que denota uma quebra de linha:

*/

let guestList = "Guests:\n * John\n * Pete\n * Mary";

alert(guestList); // a multiline list of guests 

// Por exemplo, essas duas linhas s√£o iguais, apenas escritas de forma diferente:

let str1 = "Hello\nWorld"; // two lines using a "newline symbol"

// two lines using a normal newline and backticks
let str2 = `Hello
World`;

alert(str1 == str2); // true

/*

Existem outros caracteres ‚Äúespeciais‚Äù menos comuns.

Aqui est√° a lista completa:

Personagem	Descri√ß√£o
\n	Nova linha
\r	Nos arquivos de texto do Windows, uma combina√ß√£o de dois caracteres \r\nrepresenta uma nova quebra, enquanto no sistema operacional n√£o Windows √© apenas \n. Isso √© por raz√µes hist√≥ricas, a maioria dos softwares Windows tamb√©m entende \n.
\', \"	Cita√ß√µes
\\	Barra invertida
\t	Aba
\b, \f, \v	Backspace, Form Feed, Vertical Tab ‚Äì mantidos para compatibilidade, n√£o s√£o usados ‚Äã‚Äãhoje em dia.
\xXX	Caractere Unicode com o Unicode hexadecimal fornecido XX, por exemplo, '\x7A'√© o mesmo que 'z'.
\uXXXX	Um s√≠mbolo Unicode com o c√≥digo hexadecimal XXXXna codifica√ß√£o UTF-16, por exemplo \u00A9‚Äì √© um Unicode para o s√≠mbolo de copyright ¬©. Deve ter exatamente 4 d√≠gitos hexadecimais.
\u{X‚Ä¶XXXXXX}(1 a 6 caracteres hexadecimais)	Um s√≠mbolo Unicode com a codifica√ß√£o UTF-32 fornecida. Alguns caracteres raros s√£o codificados com dois s√≠mbolos Unicode, ocupando 4 bytes. Desta forma podemos inserir c√≥digos longos.
Exemplos com Unicode:

*/

alert( "\U00a9" ); // ¬©
alert( "\u{20331}" ); // ‰Ω´, a rare Chinese hieroglyph (long Unicode)
alert( "\u{1F60D}" ); // üòç, a smiling face symbol (another long Unicode)

/*

Todos os caracteres especiais come√ßam com um caractere de barra invertida \. Tamb√©m √© chamado de ‚Äúpersonagem de fuga‚Äù.

Tamb√©m podemos us√°-lo se quisermos inserir uma cita√ß√£o na string.

Por exemplo:

*/

alert( 'I\¬¥m the the Walrus!' ); // I¬¥m the Walrus!

/*

Como voc√™ pode ver, temos que preceder a aspa interna com a barra invertida \', pois caso contr√°rio isso indicaria o final da string.

Obviamente, apenas as aspas que s√£o as mesmas que as anexas precisam ser ignoradas. Ent√£o, como uma solu√ß√£o mais elegante, poder√≠amos mudar para aspas duplas ou acentos graves:

*/

alert( `i¬¥m the Walrus!` ); // I¬¥m the Walrus!

/*

Observe que a barra invertida \serve para a leitura correta da string por JavaScript, depois desaparece. A string na mem√≥ria n√£o tem \. Voc√™ pode ver isso claramente nos alertexemplos acima.

Mas e se precisarmos mostrar uma barra invertida real \dentro da string?

Isso √© poss√≠vel, mas precisamos dobr√°-lo como \\:

*/

alert( `The backslash: \\` ); // The backslash: \

/*

Comprimento da string
A lengthpropriedade tem o comprimento da string:

*/

alert( `My\n`.length ); // 3

/*

Observe que \n√© um √∫nico caractere ‚Äúespecial‚Äù, portanto, o comprimento √© de fato 3.

length√© uma propriedade
Pessoas com experi√™ncia em alguns outros idiomas √†s vezes digitam incorretamente chamando str.length()em vez de apenas str.length. Isso n√£o funciona.

Observe que str.length√© uma propriedade num√©rica, n√£o uma fun√ß√£o. N√£o h√° necessidade de adicionar par√™nteses depois dele.

Acessando caracteres
Para obter um caractere em position pos, use colchetes [pos]ou chame o m√©todo str.charAt(pos) . O primeiro caractere come√ßa na posi√ß√£o zero:

*/

let str = `Hello`;

// the first character
alert( str[0] ); // H
alert( str.charAt(0) ); // H

// the last character
alert( str[str.length - 1] ); // 0

/*

Os colchetes s√£o uma maneira moderna de obter um personagem, embora charAtexistam principalmente por raz√µes hist√≥ricas.

A √∫nica diferen√ßa entre eles √© que se nenhum caractere for encontrado, []retorna undefinede charAtretorna uma string vazia:

*/

let str = `Hello`; 

alert( str[1000] ); // undefined
alert( str.charAt(1000) ); // '' (an empty string)

// Tamb√©m podemos iterar sobre caracteres usando for..of:

for (let char of "Hello") {
    alert(char); // H,e,l,l,o (char becomes "H", then "e", then "l" etc)
}

/*

Strings s√£o imut√°veis
Strings n√£o podem ser alteradas em JavaScript. √â imposs√≠vel mudar um personagem.

Vamos tentar para mostrar que n√£o funciona:

*/

let str = 'Hi';

str[0] = 'h'; // error
alert( str[0] ); // doesn¬¥t work

/*

A solu√ß√£o usual √© criar uma string totalmente nova e atribu√≠-la em strvez da antiga.

Por exemplo:

*/

let str = 'Hi';

str = 'h' + str[1]; // replace the string

alert( str ); // hi

/*

Nas se√ß√µes a seguir, veremos mais exemplos disso.

Mudando o caso
Os m√©todos toLowerCase() e toUpperCase() alteram o caso:

*/

alert( 'Interface'.toUpperCase() ); // INTERFACE
alert( 'Interface'.toLowerCase() ); // interface

// Ou, se quisermos um √∫nico caractere em min√∫sculas:

alert( 'Interface'[0].toLoweCase() ); // 'i'

/*

Procurando uma substring
Existem v√°rias maneiras de procurar uma substring dentro de uma string.

str.indexOf
O primeiro m√©todo √© str.indexOf(substr, pos) .

Ele procura o substrin str, a partir da posi√ß√£o especificada pos, e retorna a posi√ß√£o em que a correspond√™ncia foi encontrada ou -1se nada pode ser encontrado.

Por exemplo:

*/

let str = 'Widget with id';

alert( str.indexOf('Widget') ); // 0, because 'Widget' is found at the beginning
alert( str.indexOf('widget') ); // -1, not found, the search is case-sensitive

alert( str.indexOf("id") ); // 1, "id" is found at the position 1 (..idget with id)

/*

O segundo par√¢metro opcional nos permite iniciar a busca a partir de uma determinada posi√ß√£o.

Por exemplo, a primeira ocorr√™ncia de "id"est√° na posi√ß√£o 1. Para procurar a pr√≥xima ocorr√™ncia, vamos iniciar a pesquisa a partir de position 2:

*/

let str = 'Widget with id';

alert( str.indexOf('id', 2) ) // 12

// Se estivermos interessados ‚Äã‚Äãem todas as ocorr√™ncias, podemos executar indexOfem um loop. Cada nova chamada √© feita com a posi√ß√£o ap√≥s a partida anterior:

let str = 'As sly as a fox, as strong as an ox';

let target = 'as'; // let¬¥s look for it

let pos = 0;
while (true) {
    let foundPos = str.indexOf(target, pos);
    if (foundPos == -1) break;

    alert( `Found at ${foundPos}`);
    pos = foundPos + 1; // continue the search from the next position
}

// O mesmo algoritmo pode ser apresentado mais curto:

let str = "As sly as a fox, as strong as an ox";
let target = "as";

let pos = -1;
while ((pos = str.indexOf(target, pos + 1)) != -1) {
    alert( pos );
}

/*

str.lastIndexOf(substr, position)
H√° tamb√©m um m√©todo semelhante str.lastIndexOf(substr, position) que pesquisa do final de uma string at√© seu in√≠cio.

Ele listaria as ocorr√™ncias na ordem inversa.

H√° um pequeno inconveniente indexOfno ifteste. N√£o podemos colocar ifassim:

*/

let str = "Widget with id";

if (str.indexOf("Widget")) {
    alert("We found it"); // doesn¬¥t work!
}

/*

O alertno exemplo acima n√£o aparece porque str.indexOf("Widget")retorna 0(o que significa que encontrou a correspond√™ncia na posi√ß√£o inicial). Certo, mas ifconsidera 0ser false.

Ent√£o, devemos realmente verificar -1, assim:

*/

let str = "Widget with id";

if (str.indexOf("Widget") != -1) {
    alert("We found it"); // works now!
}

/*

O truque N√ÉO bit a bit
Um dos truques antigos usados ‚Äã‚Äãaqui √© o operador NOT bit a bit. ~Ele converte o n√∫mero em um inteiro de 32 bits (remove a parte decimal se existir) e depois inverte todos os bits em sua representa√ß√£o bin√°ria.

Na pr√°tica, isso significa uma coisa simples: para inteiros de 32 bits ~n√© igual a -(n+1).

Por exemplo:

*/

alert( ~2 ); // -3, the same as -(2+1)
alert( ~1 ); // -2, the same as -(1+1)
alert( ~0 ); // -1, the same as -(0+1)
alert( ~-1 ); // 0, the same as -(-1+1)

/*

Como podemos ver, ~n√© zero somente se n == -1(isso √© para qualquer inteiro com sinal de 32 bits n).

Portanto, o teste if ( ~str.indexOf("...") )√© verdadeiro somente se o resultado de indexOfn√£o for -1. Em outras palavras, quando h√° uma correspond√™ncia.

As pessoas o usam para encurtar indexOfcheques:

*/

let str = "Widget";

if (~str.indexOF("Widget")) {
    alert( 'Found it!' ); works
}

/*

Geralmente n√£o √© recomendado usar recursos de linguagem de uma maneira n√£o √≥bvia, mas esse truque em particular √© amplamente usado em c√≥digo antigo, ent√£o devemos entend√™-lo.

Apenas lembre-se: if (~str.indexOf(...))l√™ como ‚Äúse encontrado‚Äù.

Para ser preciso, por√©m, como os n√∫meros grandes s√£o truncados para 32 bits pelo ~operador, existem outros n√∫meros que d√£o 0, o menor √© ~4294967295=0. Isso torna essa verifica√ß√£o correta apenas se uma string n√£o for t√£o longa.

No momento, podemos ver esse truque apenas no c√≥digo antigo, pois o JavaScript moderno fornece o .includesm√©todo (veja abaixo).

inclui, come√ßa com, termina com
O m√©todo mais moderno str.includes(substr, pos) retorna true/falsedependendo se strcont√©m substrdentro.

√â a escolha certa se precisamos testar para a partida, mas n√£o precisamos de sua posi√ß√£o:

*/

alert( "Widget with id".includes("Widget") ); // true

alert( "Hello".includes("Bye") ); // false

// O segundo argumento opcional de str.includes√© a posi√ß√£o para iniciar a pesquisa:

alert( "Widget".includes("id") ); // true
alert( "Widget".includes("id", 3) ); // false, from position 3 there is no "id"

// Os m√©todos str.startsWith e str.endsWith fazem exatamente o que dizem:

alert( "Widget".startsWith("Wid") ); // true, "Widget" starts with "Wid"
alert( "Widget".endsWith("get") ); // true, "Widget" ends with "get"

/*

Obtendo uma substring
Existem 3 m√©todos em JavaScript para obter uma substring: substring, substre slice.

str.slice(start [, end])
Retorna a parte da string de startto (mas n√£o incluindo) end.

Por exemplo:

*/

let str = "stringify";
alert( str.slice(0, 5) ); // 'strin', the substring from 0 to 5 (not including 5)
alert( str.slice(0, 1) ); // 's', from 0 to 1, but not including 1, so only character at 0

// Se n√£o houver um segundo argumento, ent√£o slicevai at√© o final da string:

let str = "stringify";
alert( str.slice(2) ); // 'ringify', from the 2nd position till the end

// Valores negativos para start/endtamb√©m s√£o poss√≠veis. Eles significam que a posi√ß√£o √© contada a partir do final da string:

let str = "stringify";

// start at the 4th position from the right, end at the 1st from the right
alert( str.slice(-4, -1) ); // 'gif'

/*

str.substring(start [, end])
Retorna a parte da string entre start e end.

Isso √© quase o mesmo que slice, mas permite startser maior que end.

Por exemplo:

*/

let str = "stringify";

// these are same for substring
alert( str.substring(2, 6) ); // "ring"
alert( str.substring(6, 2) ); // "ring"

// ...but not for slice:
alert( str.slice(2, 6) ); // "ring" (the same)
alert( str.slice(6, 2) ); // "" (an empty string)

/*

Argumentos negativos (ao contr√°rio de slice) n√£o s√£o suportados, eles s√£o tratados como 0.

str.substr(start [, length])
Retorna a parte da string de start, com o dado length.

Em contraste com os m√©todos anteriores, este nos permite especificar a lengthposi√ß√£o final em vez da:

*/

let str = "stringify";
alert( str.substr(2, 4) ); // 'ring', from the 2nd position get 4 characters

// O primeiro argumento pode ser negativo, para contar a partir do final:

let str = "stringify";
alert( str.substr(-4, 2) ); // 'gi', from the 4th position get 2 characters

/*

Este m√©todo encontra-se no Anexo B da especifica√ß√£o da linguagem. Isso significa que apenas os mecanismos Javascript hospedados no navegador devem suport√°-lo e n√£o √© recomendado us√°-lo. Na pr√°tica, √© suportado em todos os lugares.

Vamos recapitular esses m√©todos para evitar qualquer confus√£o:

m√©todo	Selecione% s‚Ä¶	negativos
slice(start, end)	de startpara end(n√£o incluindo end)	permite negativos
substring(start, end)	entre starteend	valores negativos significam0
substr(start, length)	de startobter lengthpersonagens	permite negativostart
Qual escolher?
Todos eles podem fazer o trabalho. Formalmente, substrtem uma pequena desvantagem: √© descrito n√£o na especifica√ß√£o principal do JavaScript, mas no Anexo B, que abrange recursos somente do navegador que existem principalmente por raz√µes hist√≥ricas. Portanto, ambientes sem navegador podem n√£o oferecer suporte a ele. Mas, na pr√°tica, funciona em todos os lugares.

Das outras duas variantes, slice√© um pouco mais flex√≠vel, permite argumentos negativos e mais curto para escrever. Ent√£o, basta lembrar apenas slicedesses tr√™s m√©todos.

Comparando strings
Como sabemos do cap√≠tulo Compara√ß√µes , as strings s√£o comparadas caractere por caractere em ordem alfab√©tica.

Embora, existem algumas esquisitices.

1. Uma letra min√∫scula √© sempre maior que a mai√∫scula:

*/

alert( 'a' > 'Z' ); // true

// 2. Letras com sinais diacr√≠ticos est√£o ‚Äúfora de ordem‚Äù:

alert(  '√ñsterreich' > 'Zealand' ); // true

/*

Isso pode levar a resultados estranhos se classificarmos esses nomes de pa√≠ses. Normalmente as pessoas esperariam Zealandvir depois √ñsterreichna lista.

Para entender o que acontece, vamos revisar a representa√ß√£o interna de strings em JavaScript.

Todas as strings s√£o codificadas usando UTF-16 . Ou seja: cada caractere possui um c√≥digo num√©rico correspondente. Existem m√©todos especiais que permitem obter o caractere para o c√≥digo e voltar.

str.codePointAt(pos)
Retorna o c√≥digo do caractere na posi√ß√£o pos:

*/

// different case letter have different codes
alert( "z".codePointAt(0) ); // 122
alert( "Z".codePointAt(0) ); // 90

/*

String.fromCodePoint(code)
Cria um caractere por seu num√©ricocode

*/

alert( String.fromCodePoint(90) ); // Z

/*

Tamb√©m podemos adicionar caracteres Unicode por seus c√≥digos usando \useguido do c√≥digo hexadecimal:

*/

// 90 is 5a in hecadecimal system
alert( '\u005a' ); // Z

// Agora vamos ver os caracteres com c√≥digos 65..220(o alfabeto latino e um pouco mais) fazendo uma string deles:

let str = '';

for (let i = 65; i <= 220; i++) {
    str += String.fromCodePoint(i);
}
alert( str ); 
// ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~¬Ä¬Å¬Ç¬É¬Ñ
// ¬°¬¢¬£¬§¬•¬¶¬ß¬®¬©¬™¬´¬¨¬≠¬Æ¬Ø¬∞¬±¬≤¬≥¬¥¬µ¬∂¬∑¬∏¬π¬∫¬ª¬º¬Ω¬æ¬ø√Ä√Å√Ç√É√Ñ√Ö√Ü√á√à√â√ä√ã√å√ç√é√è√ê√ë√í√ì√î√ï√ñ√ó√ò√ô√ö√õ√ú

/*

Ver? Os caracteres mai√∫sculos v√£o primeiro, depois alguns especiais, depois os caracteres min√∫sculos e √ñperto do final da sa√≠da.

Agora fica √≥bvio o porqu√™ a > Z.

Os caracteres s√£o comparados por seu c√≥digo num√©rico. O c√≥digo maior significa que o caractere √© maior. O c√≥digo para a(97) √© maior que o c√≥digo para Z(90).

Todas as letras min√∫sculas seguem as letras mai√∫sculas porque seus c√≥digos s√£o maiores.
Algumas letras como √ñse destacam do alfabeto principal. Aqui, seu c√≥digo √© maior do que qualquer coisa ade z.

Compara√ß√µes corretas
O algoritmo ‚Äúcerto‚Äù para fazer compara√ß√µes de strings √© mais complexo do que parece, porque os alfabetos s√£o diferentes para diferentes idiomas.

Portanto, o navegador precisa conhecer o idioma para comparar.

Felizmente, todos os navegadores modernos (IE10- requer a biblioteca adicional Intl.js ) suportam o padr√£o de internacionaliza√ß√£o ECMA-402 .

Ele fornece um m√©todo especial para comparar strings em diferentes idiomas, seguindo suas regras.

A chamada str.localeCompare(str2) retorna um inteiro indicando se str√© menor, igual ou maior que de str2acordo com as regras do idioma:

Retorna um n√∫mero negativo se strfor menor que str2.
Retorna um n√∫mero positivo se strfor maior que str2.
Retorna 0se forem equivalentes.
Por exemplo:

*/

alert( '√ñsterreich'.localeCompare('Zealand') ); // -1

/*

Este m√©todo na verdade tem dois argumentos adicionais especificados na documenta√ß√£o , o que permite especificar o idioma (por padr√£o retirado do ambiente, a ordem das letras depende do idioma) e configurar regras adicionais como diferencia√ß√£o de mai√∫sculas e min√∫sculas ou devem "a"e devem "aÃÅ"ser tratados como o mesmo etc. .

Internos, Unicode
Conhecimento avan√ßado
A se√ß√£o se aprofunda nas partes internas das strings. Esse conhecimento ser√° √∫til se voc√™ planeja lidar com emoji, caracteres matem√°ticos ou hierogl√≠ficos raros ou outros s√≠mbolos raros.

Voc√™ pode pular a se√ß√£o se n√£o planeja apoi√°-los.

Pares substitutos
Todos os caracteres usados ‚Äã‚Äãcom frequ√™ncia t√™m c√≥digos de 2 bytes. Letras na maioria dos idiomas europeus, n√∫meros e at√© mesmo na maioria dos hier√≥glifos t√™m uma representa√ß√£o de 2 bytes.

Mas 2 bytes permitem apenas 65536 combina√ß√µes e isso n√£o √© suficiente para todos os s√≠mbolos poss√≠veis. Assim, s√≠mbolos raros s√£o codificados com um par de caracteres de 2 bytes chamados ‚Äúpar substituto‚Äù.

O comprimento de tais s√≠mbolos √© 2:

*/

alert( 'ùí≥'.length ); // 2, MATHEMATICAL SCRIPT CAPITAL X
alert( 'üòÇ'.length ); // 2, FACE WITH TEARS OF JOY
alert( '©∑∂'.length ); // 2, a rare Chinese hieroglyph

/*

Observe que os pares substitutos n√£o existiam no momento em que o JavaScript foi criado e, portanto, n√£o s√£o processados ‚Äã‚Äãcorretamente pela linguagem!

Na verdade, temos um √∫nico s√≠mbolo em cada uma das strings acima, mas lengthmostra um comprimento de 2.

String.fromCodePointe str.codePointAts√£o poucos os m√©todos raros que lidam com pares substitutos corretamente. Eles apareceram recentemente no idioma. Antes deles, havia apenas String.fromCharCode e str.charCodeAt . Esses m√©todos s√£o realmente os mesmos que fromCodePoint/codePointAt, mas n√£o funcionam com pares substitutos.

Obter um s√≠mbolo pode ser complicado, porque os pares substitutos s√£o tratados como dois caracteres:

*/

alert( 'ùí≥'[0] ); // strange symbols...
alert( 'ùí≥'[1] ); // ...pieces of the surrogate pair

/*

Observe que as pe√ßas do par substituto n√£o t√™m significado uma sem a outra. Portanto, os alertas no exemplo acima exibem lixo.

Tecnicamente, pares substitutos tamb√©m s√£o detect√°veis ‚Äã‚Äãpor seus c√≥digos: se um caractere tem o c√≥digo no intervalo de 0xd800..0xdbff, ent√£o √© a primeira parte do par substituto. O pr√≥ximo caractere (segunda parte) deve ter o c√≥digo em interval 0xdc00..0xdfff. Esses intervalos s√£o reservados exclusivamente para pares substitutos pelo padr√£o.

No caso acima:

*/

// charCodeAt is not surrogate-pair aware, so it gives codes for parts


alert( 'ùí≥'.charCodeAt(0).toString(16) ); // d835, between 0xd800 and 0xdbff
alert( 'ùí≥'.charCodeAt(1).toString(16) ); // dcb3, between 0xdc00 and 0xdfff

/*

Voc√™ encontrar√° mais maneiras de lidar com pares substitutos posteriormente no cap√≠tulo Iterables . Provavelmente existem bibliotecas especiais para isso tamb√©m, mas nada famoso o suficiente para sugerir aqui.

Marcas diacr√≠ticas e normaliza√ß√£o
Em muitos idiomas, existem s√≠mbolos compostos pelo caractere base com uma marca acima/abaixo.

Por exemplo, a letra apode ser o caractere base para: √†√°√¢√§√£√•ƒÅ. Os caracteres ‚Äúcompostos‚Äù mais comuns t√™m seu pr√≥prio c√≥digo na tabela UTF-16. Mas n√£o todos eles, porque h√° muitas combina√ß√µes poss√≠veis.

Para suportar composi√ß√µes arbitr√°rias, UTF-16 nos permite usar v√°rios caracteres Unicode: o caractere base seguido por um ou v√°rios caracteres de ‚Äúmarca‚Äù que o ‚Äúdecoram‚Äù.

Por exemplo, se tivermos Sseguido do caractere especial ‚Äúponto acima‚Äù (c√≥digo \u0307), ele ser√° mostrado como ·π†.

*/

alert( 'S\u0307' ); // SÃá

/*

Se precisarmos de uma marca adicional acima da letra (ou abaixo dela) ‚Äì n√£o h√° problema, basta adicionar o caractere de marca necess√°rio.

Por exemplo, se anexarmos um caractere ‚Äúponto abaixo‚Äù (c√≥digo \u0323), teremos ‚ÄúS com pontos acima e abaixo‚Äù: SÃáÃ£.

Por exemplo:

*/

let s1 = 'S\u0307\u0323'; // SÃáÃ£, S + dot above + dot below
let s2 = 'S\u0323\u0307'; // SÃ£Ãá, S + dot below + dot above

alert( `s1: ${s1}, s2: ${s2}` );

alert( s1 == s2 ); // false though the characters look identical (?!)

/*

Para resolver isso, existe um algoritmo de ‚Äúnormaliza√ß√£o Unicode‚Äù que traz cada string para a √∫nica forma ‚Äúnormal‚Äù.

Ele √© implementado por str.normalize() .

*/

alert( "S\u0307\u0323".normalize() == "S\u0323\u0307".normalize() ); // true

// √â engra√ßado que na nossa situa√ß√£o normalize()realmente re√∫ne uma sequ√™ncia de 3 caracteres para um: \u1e68(S com dois pontos).

alert( "S\u0307\u0323".normalize().length ); // 1

alert( "S\u0307\u0323".normalize() == "\u1e68" ); // true

/*

Na realidade, nem sempre √© assim. A raz√£o √© que o s√≠mbolo ·π®√© ‚Äúcomum o suficiente‚Äù, ent√£o os criadores do UTF-16 o inclu√≠ram na tabela principal e deram o c√≥digo.

Se voc√™ quiser aprender mais sobre regras e variantes de normaliza√ß√£o ‚Äì elas s√£o descritas no ap√™ndice do padr√£o Unicode: Unicode Normalization Forms , mas para a maioria dos prop√≥sitos pr√°ticos as informa√ß√µes desta se√ß√£o s√£o suficientes.

Resumo
Existem 3 tipos de cota√ß√µes. Os acentos graves permitem que uma string abranja v√°rias linhas e incorpore express√µes ${‚Ä¶}.
Strings em JavaScript s√£o codificadas usando UTF-16.
Podemos usar caracteres especiais como \ne inserir letras pelo Unicode usando \u....
Para obter um caractere, use: [].
Para obter uma substring, use: sliceou substring.
Para min√∫sculas/mai√∫sculas uma string, use: toLowerCase/toUpperCase.
Para procurar uma substring, use: indexOf, ou includes/startsWith/endsWithpara verifica√ß√µes simples.
Para comparar strings de acordo com o idioma, use: localeCompare, caso contr√°rio, eles s√£o comparados por c√≥digos de caracteres.
Existem v√°rios outros m√©todos √∫teis em strings:

str.trim()‚Äì remove os espa√ßos (‚Äúapara‚Äù) do in√≠cio e do fim da string.
str.repeat(n)‚Äì repete os tempos das cordas n.
‚Ä¶e muito mais pode ser encontrado no manual .
Strings tamb√©m possuem m√©todos para pesquisar/substituir com express√µes regulares. Mas esse √© um grande t√≥pico, ent√£o √© explicado em uma se√ß√£o separada do tutorial Express√µes regulares .

*/

